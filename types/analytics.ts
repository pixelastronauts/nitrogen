import type { 
  CartQuery, 
  ProductQuery, 
  CollectionQuery,
  CountryCode,
  LanguageCode 
} from '@@/types/shopify-storefront'
import type { Ref } from 'vue'

export type ShopAnalytics = {
  /** The shop ID. */
  shopId: string
  /** The language code that is being displayed to user. */
  acceptedLanguage: LanguageCode
  /** The currency code that is being displayed to user. */
  currency: string
  /** The Hydrogen subchannel ID generated by Oxygen in the environment variable. */
  hydrogenSubchannelId: string | '0'
}

export type CartReturn = CartQuery['cart']
export type CartLine = NonNullable<CartReturn>['lines']['edges'][0]['node']

export type OtherData = {
  /** Any other data that should be included in the event. */
  [key: string]: unknown
}

type BasePayload = {
  /** The shop data passed in from the analytics provider. */
  shop: ShopAnalytics | null
  /** The custom data passed in from the analytics provider. */
  customData?: Record<string, unknown>
}

type UrlPayload = {
  /** The url location of when this event is collected. */
  url: string
}

export type ProductPayload = {
  /** The product id. */
  id: string
  /** The product title. */
  title: string
  /** The displaying variant price. */
  price: string
  /** The product vendor. */
  vendor: string
  /** The displaying variant id. */
  variantId: string
  /** The displaying variant title. */
  variantTitle: string
  /** The quantity of product. */
  quantity: number
  /** The product sku. */
  sku?: string
  /** The product type. */
  productType?: string
}

type ProductsPayload = {
  /** The products associated with this event. */
  products: Array<ProductPayload & OtherData>
}

type CollectionPayloadDetails = {
  /** The collection id. */
  id: string
  /** The collection handle. */
  handle: string
}

type CollectionPayload = {
  collection: CollectionPayloadDetails
}

type SearchPayload = {
  /** The search term used for the search results page */
  searchTerm: string
  /** The search results */
  searchResults?: any
}

type CartPayload = {
  /** The current cart state. */
  cart: CartReturn | null
  /** The previous cart state. */
  prevCart: CartReturn | null
}

type CartLinePayload = {
  /** The previous state of the cart line that got updated. */
  prevLine?: CartLine
  /** The current state of the cart line that got updated. */
  currentLine?: CartLine
}

// Event payloads
export type CollectionViewPayload = CollectionPayload & UrlPayload & BasePayload
export type ProductViewPayload = ProductsPayload & UrlPayload & BasePayload
export type CartViewPayload = CartPayload & UrlPayload & BasePayload
export type PageViewPayload = UrlPayload & BasePayload
export type SearchViewPayload = SearchPayload & UrlPayload & BasePayload

export type CartUpdatePayload = CartPayload & BasePayload & OtherData & {
  /** The timestamp when the event was triggered. */
  eventTimestamp: number
}

export type CartLineUpdatePayload = CartLinePayload & CartPayload & BasePayload & OtherData

export type CustomEventPayload = BasePayload & OtherData

export type EventPayloads =
  | PageViewPayload
  | ProductViewPayload
  | CollectionViewPayload
  | CartViewPayload
  | SearchViewPayload
  | CartUpdatePayload
  | CartLineUpdatePayload
  | CustomEventPayload

export const AnalyticsEvent = {
  // Views
  PAGE_VIEWED: 'page_viewed' as const,
  PRODUCT_VIEWED: 'product_viewed' as const,
  COLLECTION_VIEWED: 'collection_viewed' as const,
  CART_VIEWED: 'cart_viewed' as const,
  SEARCH_VIEWED: 'search_viewed' as const,

  // Cart
  CART_UPDATED: 'cart_updated' as const,
  PRODUCT_ADD_TO_CART: 'product_added_to_cart' as const,
  PRODUCT_REMOVED_FROM_CART: 'product_removed_from_cart' as const,

  // Custom
  CUSTOM_EVENT: `custom_` as `custom_${string}`,
} as const

export type EventTypes = typeof AnalyticsEvent[keyof typeof AnalyticsEvent]

export type AnalyticsContextValue = {
  /** A function to tell you the current state of if the user can be tracked by analytics. */
  canTrack: Ref<() => boolean>
  /** The current cart state. */
  cart: Ref<CartReturn | null>
  /** The custom data passed in from the analytics provider. */
  customData: Ref<Record<string, unknown>>
  /** The previous cart state. */
  prevCart: Ref<CartReturn | null>
  /** A function to publish an analytics event. */
  publish: <T extends EventPayloads>(event: string, payload: T) => void
  /** A function to register with the analytics provider. */
  register: (key: string) => { ready: () => void }
  /** The shop configuration required to publish events to Shopify. */
  shop: Ref<ShopAnalytics | null>
  /** A function to subscribe to analytics events. */
  subscribe: <T extends EventPayloads>(event: string, callback: (payload: T) => void) => void
  /** The privacy banner SDK methods with the config applied */
  privacyBanner: any
  /** The customer privacy SDK methods with the config applied */
  customerPrivacy: any
}

export type Consent = {
  checkoutDomain?: string
  storefrontAccessToken?: string
  withPrivacyBanner?: boolean
  country?: CountryCode
  language?: LanguageCode
} 